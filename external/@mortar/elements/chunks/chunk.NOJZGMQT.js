import {
  MteContentBase,
  ResponsiveValueConverter,
  WaitForFrameworkMixin,
  __decorateClass,
  defineElement,
  getResponsivePropVal,
  mapResponsiveNumberToPx,
  styles7 as styles
} from "./chunk.Y4EV6E5D.js";

// src/atomic/grid/grid-item.element.ts
import { html } from "lit";
import { property } from "lit/decorators.js";

// src/atomic/grid/grid-item.styles.ts
import { css } from "lit";
var styles2 = css``;

// src/atomic/grid/grid-item.element.ts
import { selectorFactory } from "@mortar/styles";
var MteGridItem = class extends MteContentBase {
  getGridArea(bp) {
    const colSpan = getResponsivePropVal(this, "span", bp) ?? null;
    const colStart = getResponsivePropVal(this, "start", bp) ?? null;
    const rowSpan = getResponsivePropVal(this, "rowSpan", bp) ?? null;
    const rowStart = getResponsivePropVal(this, "rowStart", bp) ?? null;
    let gridColumnStart = colStart;
    let gridColumnEnd = colSpan ? `span ${colSpan}` : null;
    const gridRowStart = rowStart;
    const gridRowEnd = rowSpan ? `span ${rowSpan}` : null;
    if (colSpan === "all") {
      gridColumnStart = gridColumnStart ?? "1";
      gridColumnEnd = "-1";
    }
    if (!gridColumnStart && !gridColumnEnd && !gridRowStart && !gridRowEnd) {
      return null;
    } else {
      return {
        gridColumnStart,
        gridColumnEnd,
        gridRowStart,
        gridRowEnd
      };
    }
  }
  updateInstanceStyles(changedProps) {
    super.updateInstanceStyles(changedProps);
    let shouldUpdateStyles = false;
    for (const key of changedProps.keys()) {
      if (MteGridItem._styleProps.has(key)) {
        shouldUpdateStyles = true;
        break;
      }
    }
    if (shouldUpdateStyles) {
      this.setInstanceStyle("mte-grid-item", selectorFactory(this.instanceStyleSelectorRoot), {
        ...this.getGridArea(""),
        xs: this.getGridArea("xs"),
        sm: this.getGridArea("sm"),
        md: this.getGridArea("md"),
        lg: this.getGridArea("lg"),
        xl: this.getGridArea("xl"),
        xxl: this.getGridArea("xxl")
      });
    }
  }
  render() {
    return html`${this.instanceStyles}<slot></slot>`;
  }
};
MteGridItem.styles = [styles, styles2];
MteGridItem._styleProps = /* @__PURE__ */ new Set([
  "span",
  "spanSm",
  "spanMd",
  "spanLg",
  "spanXl",
  "spanXxl",
  "start",
  "startSm",
  "startMd",
  "startLg",
  "startXl",
  "startXxl",
  "rowStart",
  "rowStartSm",
  "rowStartMd",
  "rowStartLg",
  "rowStartXl",
  "rowStartXxl",
  "rowSpan",
  "rowSpanSm",
  "rowSpanMd",
  "rowSpanLg",
  "rowSpanXl",
  "rowSpanXxl"
]);
__decorateClass([
  property({ reflect: true, converter: ResponsiveValueConverter })
], MteGridItem.prototype, "span", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "spanSm", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "spanMd", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "spanLg", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "spanXl", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "spanXxl", 2);
__decorateClass([
  property({ reflect: true, converter: ResponsiveValueConverter })
], MteGridItem.prototype, "start", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "startSm", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "startMd", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "startLg", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "startXl", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "startXxl", 2);
__decorateClass([
  property({ reflect: true, converter: ResponsiveValueConverter })
], MteGridItem.prototype, "rowSpan", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowSpanSm", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowSpanMd", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowSpanLg", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowSpanXl", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowSpanXxl", 2);
__decorateClass([
  property({ reflect: true, converter: ResponsiveValueConverter })
], MteGridItem.prototype, "rowStart", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowStartSm", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowStartMd", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowStartLg", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowStartXl", 2);
__decorateClass([
  property({ reflect: true })
], MteGridItem.prototype, "rowStartXxl", 2);
MteGridItem = __decorateClass([
  defineElement("mte-grid-item")
], MteGridItem);

// src/atomic/grid/content-grid.element.ts
import { html as html2 } from "lit";
import { property as property2 } from "lit/decorators.js";

// src/atomic/grid/content-grid.styles.ts
import { css as css2 } from "lit";
var styles3 = css2`:host{--grid-cols:auto-fit;--grid-item-width:1fr;--grid-item-min-width:0;display:grid;gap:var(--mte-space-md);grid-auto-rows:auto;grid-template-columns:repeat(var(--grid-cols),minmax(var(--grid-item-min-width),var(--grid-item-width)))}`;

// src/atomic/grid/content-grid.element.ts
import { selectorFactory as selectorFactory2 } from "@mortar/styles";
var MteContentGrid = class extends WaitForFrameworkMixin(MteContentBase) {
  constructor() {
    super(...arguments);
    this.withAutoRows = false;
  }
  updateInstanceStyles(changedProps) {
    super.updateInstanceStyles(changedProps);
    if (["cols", "colWidth", "colMinWidth", "withAutoRows", "autoFlow"].some(
      (prop) => changedProps.has(prop)
    )) {
      this.setInstanceStyle("mte-grid", selectorFactory2(this.instanceStyleSelectorRoot), {
        "--grid-cols": this.cols,
        "--grid-item-width": mapResponsiveNumberToPx(this.colWidth),
        "--grid-item-min-width": mapResponsiveNumberToPx(this.colMinWidth),
        "grid-auto-rows": this.withAutoRows ? "1fr" : null,
        "grid-auto-flow": this.autoFlow
      });
    }
  }
  render() {
    return html2`${this.instanceStyles}<slot></slot>`;
  }
};
MteContentGrid.styles = [styles, styles3];
__decorateClass([
  property2({ reflect: true, converter: ResponsiveValueConverter })
], MteContentGrid.prototype, "cols", 2);
__decorateClass([
  property2({ reflect: true, converter: ResponsiveValueConverter })
], MteContentGrid.prototype, "colWidth", 2);
__decorateClass([
  property2({ reflect: true, converter: ResponsiveValueConverter })
], MteContentGrid.prototype, "colMinWidth", 2);
__decorateClass([
  property2({ type: Boolean, reflect: true })
], MteContentGrid.prototype, "withAutoRows", 2);
__decorateClass([
  property2({ reflect: true })
], MteContentGrid.prototype, "autoFlow", 2);
MteContentGrid = __decorateClass([
  defineElement("mte-content-grid")
], MteContentGrid);

// src/atomic/grid/layout-grid.element.ts
import { html as html3 } from "lit";
import { property as property3 } from "lit/decorators.js";

// src/atomic/grid/layout-grid.styles.ts
import { css as css3 } from "lit";
var styles4 = css3`:host{--grid-rows:1;--grid-cols:12;--grid-item-width:1fr;--grid-item-min-width:0;display:grid;gap:var(--mte-space-lg);grid-template-columns:repeat(var(--grid-cols,12),1fr);grid-template-rows:repeat(var(--grid-rows,1),1fr)}`;

// src/atomic/grid/layout-grid.element.ts
import { selectorFactory as selectorFactory3 } from "@mortar/styles";
var MteLayoutGrid = class extends WaitForFrameworkMixin(MteContentBase) {
  updateInstanceStyles(changedProps) {
    super.updateInstanceStyles(changedProps);
    if (["cols", "rows", "autoFlow"].some((prop) => changedProps.has(prop))) {
      this.setInstanceStyle("mte-grid", selectorFactory3(this.instanceStyleSelectorRoot), {
        "--grid-cols": this.cols,
        "--grid-rows": this.rows,
        "grid-auto-flow": this.autoFlow
      });
    }
  }
  render() {
    return html3`${this.instanceStyles}<slot></slot>`;
  }
};
MteLayoutGrid.styles = [styles, styles4];
__decorateClass([
  property3({ reflect: true, converter: ResponsiveValueConverter })
], MteLayoutGrid.prototype, "cols", 2);
__decorateClass([
  property3({ reflect: true, converter: ResponsiveValueConverter })
], MteLayoutGrid.prototype, "rows", 2);
__decorateClass([
  property3({ reflect: true })
], MteLayoutGrid.prototype, "autoFlow", 2);
MteLayoutGrid = __decorateClass([
  defineElement("mte-layout-grid")
], MteLayoutGrid);

// src/atomic/grid/layout-container.element.ts
import { html as html4 } from "lit";
import { property as property4 } from "lit/decorators.js";

// src/atomic/grid/layout-container.styles.ts
import { css as css4 } from "lit";
var styles5 = css4`:host{--gutter:var(--mte-space-lg);--popout-bleed-width:var(--gutter);--content-max-width:100%;--content-width:calc(var(--content-max-width) - var(--gutter)*2);--bleed-popout:minmax(0,var(--popout-bleed-width));--bleed-full:minmax(var(--gutter),1fr);display:grid;grid-template-columns:[full-start] var(--bleed-full) [popout-start] var(--bleed-popout) [content-start] var(--content-width) [content-end] var(--bleed-popout) [popout-end] var(--bleed-full) [full-end]}:host ::slotted(*){grid-column:content}:host ::slotted([data-mte-layout-bleed-full]),:host ::slotted([layoutBleed=full]){grid-column:full}:host ::slotted([data-mte-layout-bleed-popout]),:host ::slotted([layoutBleed=popout]){grid-column:popout}@media (min-width:480px){:host(:not([fluid])){--content-max-width:min(100%,768px)}}@media (min-width:768px){:host(:not([fluid])){--content-max-width:min(100%,1024px)}}@media (min-width:1024px){:host(:not([fluid])){--content-max-width:min(100%,1280px)}}@media (min-width:1280px){:host(:not([fluid])){--content-max-width:min(100%,1440px)}}@media (min-width:1536px){:host(:not([fluid])){--content-max-width:min(100%,1440px)}}`;

// src/atomic/grid/layout-container.element.ts
import { selectorFactory as selectorFactory4 } from "@mortar/styles";
var MteLayoutContainer = class extends WaitForFrameworkMixin(MteContentBase) {
  constructor() {
    super(...arguments);
    this.fluid = false;
  }
  updateInstanceStyles(changedProps) {
    super.updateInstanceStyles(changedProps);
    if (changedProps.has("popoutBleedWidth")) {
      this.setInstanceStyle("mte-grid", selectorFactory4(this.instanceStyleSelectorRoot), {
        "--popout-bleed-width": mapResponsiveNumberToPx(this.popoutBleedWidth)
      });
    }
  }
  render() {
    return html4`${this.instanceStyles}<slot></slot>`;
  }
};
MteLayoutContainer.styles = [styles, styles5];
__decorateClass([
  property4({ type: Boolean, reflect: true })
], MteLayoutContainer.prototype, "fluid", 2);
__decorateClass([
  property4({ reflect: true, converter: ResponsiveValueConverter })
], MteLayoutContainer.prototype, "popoutBleedWidth", 2);
MteLayoutContainer = __decorateClass([
  defineElement("mte-layout-container")
], MteLayoutContainer);

export {
  MteGridItem,
  styles3 as styles,
  MteContentGrid,
  MteLayoutGrid,
  MteLayoutContainer
};
//# sourceMappingURL=data:application/json;base64,
